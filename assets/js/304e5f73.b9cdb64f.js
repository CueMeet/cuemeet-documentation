"use strict";(self.webpackChunkcuemeet_documentation=self.webpackChunkcuemeet_documentation||[]).push([[184],{10220:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"system-architecture","title":"System Design Diagram","description":"Below is a diagram of the system architecture for CueMeet and Meeting Bots Infrastructure and inner workings.","source":"@site/docs/system-architecture.mdx","sourceDirName":".","slug":"/system-architecture","permalink":"/cuemeet-documentation/docs/system-architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/system-architecture.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"displayed_sidebar":"pageSidebar"},"sidebar":"pageSidebar","previous":{"title":"Introduction to CueMeet","permalink":"/cuemeet-documentation/docs/introduction"},"next":{"title":"Local Setup","permalink":"/cuemeet-documentation/docs/local-setup"}}');var s=n(74848),r=n(28453);const a={sidebar_position:3,displayed_sidebar:"pageSidebar"},o="System Design Diagram",c={},d=[];function l(e){const t={h1:"h1",header:"header",p:"p",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"system-design-diagram",children:"System Design Diagram"})}),"\n",(0,s.jsx)(t.p,{children:"Below is a diagram of the system architecture for CueMeet and Meeting Bots Infrastructure and inner workings."}),"\n",(0,s.jsx)("iframe",{src:"https://link.excalidraw.com/readonly/0e3OtfFjgy0qEIXckCkH",width:"100%",height:"600",style:{border:"none"}}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(t.p,{children:"This architecture diagram illustrates an on-demand meeting bot system deployed on Amazon Web Services (AWS). It integrates several cloud-native and backend technologies to manage the lifecycle of meeting bots, from task orchestration to containerized execution and error-handling mechanisms. Let\u2019s break this down in digestible chunks."}),"\n",(0,s.jsx)(t.p,{children:"\ud83e\udde0 Core Workflow"}),"\n",(0,s.jsx)(t.p,{children:"At the heart of the system lies a Control Backend, built with BullMQ (a Redis-based task queue) and a reactive framework (likely NestJS, judging by the pink logo). This backend schedules and manages bot jobs, using AWS SDK to dynamically spin up containers in AWS Fargate a serverless compute engine for containers. These containers run the MeetingBot, likely a Python-based automation tool, utilizing Selenium for browser control."}),"\n",(0,s.jsx)(t.p,{children:"\ud83d\udee0\ufe0f Execution & Persistence"}),"\n",(0,s.jsx)(t.p,{children:"When a bot job is dispatched, Fargate pulls the required Docker image from Amazon ECR (Elastic Container Registry). These bots, upon execution, may generate artifacts (e.g., screenshots, logs) that are uploaded to Amazon S3. This decouples the data from the execution lifecycle and ensures durability. Meanwhile, the Worker Backend (built on Django and powered by Celery) interacts with the Control Backend using gRPC. It\u2019s likely responsible for long-running jobs, failure recovery, and scheduling. Redis and PostgreSQL back these services with fast in-memory caching and persistent state, respectively."}),"\n",(0,s.jsx)(t.p,{children:"\ud83d\udea8 Failure Handling & Observability"}),"\n",(0,s.jsx)(t.p,{children:"In the event of issues like failure to publish events or data corruption notifications are sent to an SNS Topic (Simple Notification Service). To ensure reliability, the SNS topic is paired with a Dead Letter Queue (DLQ) via SQS (Simple Queue Service), catching unprocessed or failed messages for further inspection or reprocessing."}),"\n",(0,s.jsx)(t.p,{children:"CloudWatch (not shown here but implied in AWS architecture) is typically used to monitor ECS logs and application-level metrics, aiding in debugging and performance optimization."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(96540);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);