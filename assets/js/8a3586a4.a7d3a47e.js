"use strict";(self.webpackChunkcuemeet_documentation=self.webpackChunkcuemeet_documentation||[]).push([[863],{28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>c});var r=o(96540);const s={},t=r.createContext(s);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(t.Provider,{value:n},e.children)}},61991:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"local-setup","title":"Control Panel Local Setup","description":"This guide walks you through setting up Cuemeet locally for development and testing purposes.","source":"@site/docs/local-setup.md","sourceDirName":".","slug":"/local-setup","permalink":"/cuemeet-documentation/docs/local-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/local-setup.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"displayed_sidebar":"pageSidebar"},"sidebar":"pageSidebar","previous":{"title":"Amazon AWS Meeting Bots Configuration","permalink":"/cuemeet-documentation/docs/aws-setup"},"next":{"title":"Authorization","permalink":"/cuemeet-documentation/docs/bot/api-info"}}');var s=o(74848),t=o(28453);const i={sidebar_position:3,displayed_sidebar:"pageSidebar"},c="Control Panel Local Setup",a={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation Steps",id:"installation-steps",level:2},{value:"Project Folder Structure",id:"project-folder-structure",level:3},{value:"Database Migrations",id:"database-migrations",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Container Startup Issues",id:"container-startup-issues",level:4},{value:"Database Connection Issues",id:"database-connection-issues",level:4},{value:"Service Dependencies",id:"service-dependencies",level:4},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"control-panel-local-setup",children:"Control Panel Local Setup"})}),"\n",(0,s.jsx)(n.p,{children:"This guide walks you through setting up Cuemeet locally for development and testing purposes."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.p,{children:"Before you begin, make sure you have the following installed:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://git-scm.com/downloads",children:"Git"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.docker.com/get-started/get-docker/",children:"Docker and Docker Compose "})}),"\n",(0,s.jsx)(n.li,{children:"Node.js (v14 or later) - Optional for local development without Docker"}),"\n",(0,s.jsx)(n.li,{children:"Python 3.10 or higher - Optional for local development without Docker"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"installation-steps",children:"Installation Steps"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Clone the repository"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/CueMeet/Meeting-Bots-Control-Panel.git\ncd Meeting-Bots-Control-Panel\n"})}),"\n",(0,s.jsx)(n.h3,{id:"project-folder-structure",children:"Project Folder Structure"}),"\n",(0,s.jsxs)(o,{children:[(0,s.jsx)("summary",{children:"Click to expand folder structure"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:".\n\u251c\u2500\u2500 CODE_OF_CONDUCT.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 api-backend\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 Makefile\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 nest-cli.json\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 test\n\u2502   \u251c\u2500\u2500 tsconfig.build.json\n\u2502   \u251c\u2500\u2500 tsconfig.json\n\u2502   \u2514\u2500\u2500 yarn.lock\n\u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 banner.png\n\u2502   \u2514\u2500\u2500 cuemeet-logo.png\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 pg-db\n\u2502   \u2514\u2500\u2500 init-multiple-databases.sql\n\u251c\u2500\u2500 protos\n\u2502   \u2514\u2500\u2500 worker_backend.transcript_management\n\u2514\u2500\u2500 worker-backend\n    \u251c\u2500\u2500 Dockerfile\n    \u251c\u2500\u2500 Makefile\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 api\n    \u251c\u2500\u2500 manage.py\n    \u251c\u2500\u2500 nltk\n    \u251c\u2500\u2500 poetry.lock\n    \u251c\u2500\u2500 pyproject.toml\n    \u2514\u2500\u2500 worker_backend\n"})})]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Configure Environment Variables"})}),"\n"]}),"\n",(0,s.jsxs)(o,{children:[(0,s.jsx)("summary",{children:"Click to view/copy Backend API .env configuration"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-env",children:"# Backend API Configuration\n# Application\nPORT=4000\nNODE_ENV=development\nCORS_ALLOWED_ORIGINS=*\n\n# Database\nDB_HOST=pg-db\nDB_PORT=5432\nDB_USERNAME=meetingbots_user\nDB_PASSWORD=cuecard-meting-bots-secret\nDB_DATABASE=meetingbots_db_backend_api\n\n\n# Redis\nREDIS_HOST=redis\nREDIS_PORT=6379\n\n\n# AWS (Must be filled in from AWS setup steps)\nAWS_ACCESS_KEY=  # Your AWS Access Key from AWS setup\nAWS_SECRET_KEY=  # Your AWS Secret Key from AWS setup\n\n## S3\nAWS_BUCKET_REGION=  # Your S3 bucket region\nAWS_MEETING_BOT_BUCKET_NAME=  # Your S3 bucket name\n\n## ECS (Must match the AWS configurations)\nAWS_ECS_CLUSTER_NAME=  # Your AWS ECS Cluster Name\nAWS_SECURITY_GROUP=  # Your AWS Security Group ID\nAWS_VPS_SUBNET=  # Your AWS Subnet ID\nECS_TASK_DEFINITION_GOOGLE=  # Task Definition for Google Meet bots\nECS_CONTAINER_NAME_GOOGLE=  # Container Name for Google Meet bots\nECS_TASK_DEFINITION_ZOOM=  # Task Definition for Zoom bots\nECS_CONTAINER_NAME_ZOOM=  # Container Name for Zoom bots\nECS_TASK_DEFINITION_TEAMS=  # Task Definition for Microsoft Teams bots\nECS_CONTAINER_NAME_TEAMS=  # Container Name for Microsoft Teams bots\n\n\n# Meeting Bot\nMEETING_BOT_RETRY_COUNT=2\n\n\n# Worker Backend gRPC URL\nWORKER_BACKEND_GRPC_URL=worker-grpc:5500\n"})}),(0,s.jsx)(n.p,{children:"\u26a0\ufe0f Important: The AWS-related environment variables must be obtained from the AWS Setup Guide. Complete the AWS setup first and copy the relevant values into this file."})]}),"\n",(0,s.jsxs)(o,{children:[(0,s.jsx)("summary",{children:"Click to view/copy Worker API .env configuration"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-env",children:'# Worker API Configuration\nDJANGO_SETTINGS_MODULE=worker_backend.settings\nDJANGO_SECRET_KEY=8b1336ae5f72ec7e949e787054976962a85fb1ca935da5ca59ba0448eae178b1336ae5f7204\nDEBUG=True\nSTATIC_URL=/static/\nALLOWED_HOSTS=*\nCORS_ALLOWED_ORIGINS=*\n\n\n## PG Database\nDB_USERNAME=meetingbots_user\nDB_PASSWORD=cuecard-meting-bots-secret\nDB_NAME=meetingbots_db_worker\nDB_HOST=pg-db\nDB_PORT=5432\n\n\n# Redis Configuration\nREDIS_HOST=redis\nREDIS_PORT=6379\nREDIS_DB=2\n\n\n# AWS Configuration\nAWS_ACCESS_KEY_ID= # Your AWS Access Key from AWS setup\nAWS_SECRET_ACCESS_KEY= # Your AWS Access Key from AWS setup\n\n## AWS S3\nAWS_REGION= # Your S3 bucket region\nAWS_STORAGE_BUCKET_NAME= # Your S3 bucket name\n\n_SIGNED_URL_EXPIRY_TIME=60\n\n## HIGHLIGHT\nHIGHLIGHT_PROJECT_ID=""\nHIGHLIGHT_ENVIRONMENT_NAME=""\n\n\n## ASSEMBLY AI\nASSEMBLY_AI_API_KEY="" # https://www.assemblyai.com API KEY \n'})})]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Docker Compose Configuration"})}),"\n"]}),"\n",(0,s.jsxs)(o,{children:[(0,s.jsx)("summary",{children:"docker-compose.yml"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'services:\n  backend-api:\n    container_name: backend_rest\n    build:\n      context: ./api-backend\n      dockerfile: Dockerfile\n    ports:\n      - "4000:4000"\n    depends_on:\n      - pg-db\n      - redis\n\n  worker-api:\n    container_name: worker_rest\n    build:\n      context: ./worker-backend\n      dockerfile: Dockerfile\n    command: python manage.py migrate && gunicorn worker_backend.wsgi:application --workers 4 --bind 0.0.0.0:8000\n    ports:\n      - "8000:8000"\n    depends_on:\n      - pg-db\n      - redis\n      - backend-api\n\n  worker-grpc:\n    container_name: grpc-server\n    restart: always\n    image: cuemeet:worker-backend\n    command: bash -c "echo \'Starting gRPC server...\' && python manage.py grpcrunaioserver 0.0.0.0:5500 --max-workers 2 --verbosity 3"\n    # ports: ## Uncomment this if you want to expose grpc port\n    #   - "5500:5500"\n    depends_on:\n      - pg-db\n      - redis\n      - backend-api\n      - worker-api\n\n  redis:\n    image: redis:alpine\n    container_name: redis\n    restart: always\n    # ports: ## Uncomment this if you want to expose redis port\n    #   - "6379:6379"\n\n  pg-db:\n    image: postgres:16\n    container_name: postgres_db\n    restart: always\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./pg-db/init-multiple-databases.sql:/docker-entrypoint-initdb.d/init-multiple-databases.sql\n    # ports: ## Uncomment this if you want to expose postgres port\n    #   - "5432:5432"\n    env_file:\n      - ./pg-db/.db.env\n\n  celery_worker:\n    container_name: celery_worker\n    build:\n      context: ./worker-backend\n      dockerfile: Dockerfile\n    command: celery -A worker_backend worker --loglevel=info --concurrency=4\n    depends_on:\n      - redis\n      - pg-db\n      - worker-api\n\n  flower:\n    container_name: flower\n    build:\n      context: ./worker-backend\n      dockerfile: Dockerfile\n    command: celery -A worker_backend flower --port=5555\n    ports:\n      - "5556:5555"\n    depends_on:\n      - redis\n      - worker-grpc\n\n  documentation:\n    container_name: documentation\n    build:\n      context: ./documentation\n      dockerfile: Dockerfile\n    ports:\n      - "6000:3000"\n\nvolumes:\n  postgres_data:\n    driver: local\n'})})]}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Start the Services"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Build and start all services\ndocker compose up -d\n\n# Check service status\ndocker compose ps\n\n# Stop the service\ndocker compose down\n"})}),"\n",(0,s.jsx)(n.p,{children:"The services will be available at:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Backend API: ",(0,s.jsx)(n.code,{children:"http://localhost:4000"})]}),"\n",(0,s.jsxs)(n.li,{children:["Worker API: ",(0,s.jsx)(n.code,{children:"http://localhost:8000"})]}),"\n",(0,s.jsxs)(n.li,{children:["Worker gRPC: ",(0,s.jsx)(n.code,{children:"worker-grpc:5500"})," (internal only \u2014 accessible via Docker Compose network)"]}),"\n",(0,s.jsxs)(n.li,{children:["PostgreSQL: ",(0,s.jsx)(n.code,{children:"pg-db:5432"})," (internal only \u2014 accessible via Docker Compose network)"]}),"\n",(0,s.jsxs)(n.li,{children:["Redis: ",(0,s.jsx)(n.code,{children:"redis:6379"})," (internal only \u2014 accessible via Docker Compose network)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"database-migrations",children:"Database Migrations"}),"\n",(0,s.jsx)(n.p,{children:"For the Backend API(Nest.js)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Automatic Migrations are configured"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For the Worker API (Django):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Run migrations\npython manage.py migrate\n"})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsx)(n.h4,{id:"container-startup-issues",children:"Container Startup Issues"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ensure all required ports (4000, 8000) are available"}),"\n",(0,s.jsx)(n.li,{children:"Check if Docker daemon is running"}),"\n",(0,s.jsx)(n.li,{children:"Verify environment variables are set correctly"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"database-connection-issues",children:"Database Connection Issues"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ensure PostgreSQL container is running: ",(0,s.jsx)(n.code,{children:"docker-compose ps"})]}),"\n",(0,s.jsxs)(n.li,{children:["Check logs: ",(0,s.jsx)(n.code,{children:"docker-compose logs pg-db"})]}),"\n",(0,s.jsx)(n.li,{children:"Verify database credentials in both .env files"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"service-dependencies",children:"Service Dependencies"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Backend API must be running for Worker API to function properly"}),"\n",(0,s.jsxs)(n.li,{children:["Check service logs:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose logs backend-api\ndocker-compose logs worker-api\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"Once you have your local setup working:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Proceed to ",(0,s.jsx)(n.a,{href:"/cuemeet-documentation/docs/aws-setup",children:"AWS Setup"})," for production deployment"]}),"\n",(0,s.jsxs)(n.li,{children:["Explore the ",(0,s.jsx)(n.a,{href:"/cuemeet-documentation/docs/bot/api-info",children:"API Documentation"})]}),"\n",(0,s.jsxs)(n.li,{children:["Configure your ",(0,s.jsx)(n.a,{href:"/cuemeet-documentation/docs/meeting-bots",children:"Bot Settings"})]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);