"use strict";(self.webpackChunkcuemeet_documentation=self.webpackChunkcuemeet_documentation||[]).push([[184],{10220:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"system-architecture","title":"System Architecture Overview","description":"System Design Diagram:","source":"@site/docs/system-architecture.mdx","sourceDirName":".","slug":"/system-architecture","permalink":"/cuemeet-documentation/docs/system-architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/system-architecture.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"displayed_sidebar":"pageSidebar"},"sidebar":"pageSidebar","previous":{"title":"Introduction to CueMeet","permalink":"/cuemeet-documentation/docs/introduction"},"next":{"title":"Amazon AWS Meeting Bots Configuration","permalink":"/cuemeet-documentation/docs/aws-setup"}}');var r=s(74848),t=s(28453);const l={sidebar_position:3,displayed_sidebar:"pageSidebar"},o="System Architecture Overview",a={},c=[{value:"<strong>System Design Diagram:</strong>",id:"system-design-diagram",level:2},{value:"<strong>System Overview:</strong>",id:"system-overview",level:2},{value:"<strong>Workflow Summary:</strong>",id:"workflow-summary",level:3},{value:"<strong>Key Technologies</strong>",id:"key-technologies",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"system-architecture-overview",children:"System Architecture Overview"})}),"\n",(0,r.jsx)(n.h2,{id:"system-design-diagram",children:(0,r.jsx)(n.strong,{children:"System Design Diagram:"})}),"\n",(0,r.jsx)(n.p,{children:"Below is a diagram of the system architecture for CueMeet and Meeting Bots Infrastructure and inner workings."}),"\n",(0,r.jsx)("iframe",{src:"https://link.excalidraw.com/readonly/0e3OtfFjgy0qEIXckCkH",width:"100%",height:"600",style:{border:"none"}}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.p,{children:"The CueMeet.ai system is designed to automate and manage meeting bots across various platforms using a robust, cloud-native architecture on Amazon Web Services (AWS). This system orchestrates bot execution, data processing, and error handling to provide a seamless meeting automation experience."}),"\n",(0,r.jsx)(n.h2,{id:"system-overview",children:(0,r.jsx)(n.strong,{children:"System Overview:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Control Backend (NestJS with BullMQ):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Orchestrates the lifecycle of meeting bot jobs and directly manages ECS tasks."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Technology:"})," Built using NestJS with BullMQ for task queuing and scheduling."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Functionality:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Exposes APIs for managing meeting bots (no dedicated frontend)."}),"\n",(0,r.jsx)(n.li,{children:"Schedules and manages bot jobs."}),"\n",(0,r.jsx)(n.li,{children:"Uses the AWS SDK to directly interact with AWS ECS."}),"\n",(0,r.jsx)(n.li,{children:"Stores meeting bot configuration and status in a PostgreSQL database."}),"\n",(0,r.jsx)(n.li,{children:"Utilizes BullMQ for task queuing and processing."}),"\n",(0,r.jsxs)(n.li,{children:["Includes cron jobs for:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"syncTaskStatus"}),": Periodically checks the status of running ECS tasks and updates the database accordingly."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"initiateScheduledBot"}),": Triggers scheduled meeting bot tasks."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Manages the initiation and re-initiation of ECS tasks."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ECS Client Service:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Manages ECS task lifecycle (run, stop, list, describe)."}),"\n",(0,r.jsx)(n.li,{children:"Handles error scenarios and retries."}),"\n",(0,r.jsx)(n.li,{children:"Stores and retrieves ECS task information."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. AWS Fargate (Container Execution):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Provides a serverless compute platform for running Docker containers."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Functionality:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dynamically spins up containers based on requests from the Control Backend."}),"\n",(0,r.jsx)(n.li,{children:"Executes the MeetingBots, which are containerized Python applications."}),"\n",(0,r.jsx)(n.li,{children:"Scales automatically based on demand."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Amazon ECR (Elastic Container Registry):"})," Stores the Docker images required for the MeetingBots, ensuring efficient deployment and version control."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["3. MeetingBots (Python with ",(0,r.jsx)(n.a,{href:"https://selenium-python.readthedocs.io/",children:"Selenium"})," and ",(0,r.jsx)(n.a,{href:"https://www.ffmpeg.org/",children:"FFmpeg"}),"):"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Automates meeting participation and data capture."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Technology:"})," Built using Python, ",(0,r.jsx)(n.a,{href:"https://selenium-python.readthedocs.io/",children:"Selenium"})," (for browser automation), and ",(0,r.jsx)(n.a,{href:"https://www.ffmpeg.org/",children:"FFmpeg"})," (for audio recording)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Functionality:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Programmatically joins meetings on various platforms (Google Meet, Zoom, Microsoft Teams)."}),"\n",(0,r.jsx)(n.li,{children:"Captures high-quality audio recordings."}),"\n",(0,r.jsx)(n.li,{children:"Extracts live captions and transcripts from the respective meeting platform."}),"\n",(0,r.jsxs)(n.li,{children:["Uploads the audio and transcript data in a combined ",(0,r.jsx)(n.code,{children:".tar"})," file and also standalone audio files (.opus) to Amazon S3 using presigned URLs."]}),"\n",(0,r.jsxs)(n.li,{children:["The output files are stored in the ",(0,r.jsx)(n.code,{children:"/out"})," directory inside the container."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"4. Amazon S3 (Object Storage):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Stores the meeting data (audio and transcript files)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Functionality:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Receives uploaded data from the MeetingBots."}),"\n",(0,r.jsx)(n.li,{children:"Provides durable and scalable storage."}),"\n",(0,r.jsx)(n.li,{children:"Triggers SNS notifications on new file uploads."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"5. Worker Backend (Django with Celery):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Processes the uploaded meeting data, generating enhanced transcripts and performing post-processing tasks."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Technology:"})," Built using Django and Celery, a distributed task queue."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Functionality:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Receives notifications from S3 via SNS."}),"\n",(0,r.jsxs)(n.li,{children:["Downloads the ",(0,r.jsx)(n.code,{children:".tar"})," file from S3."]}),"\n",(0,r.jsx)(n.li,{children:"Extracts audio and transcript files."}),"\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.a,{href:"https://www.assemblyai.com/",children:"AssemblyAI"})," for high-quality audio transcription."]}),"\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.a,{href:"https://www.nltk.org/",children:"NLTK"})," and ",(0,r.jsx)(n.a,{href:"https://github.com/rapidfuzz/RapidFuzz",children:"rapidfuzz"})," for speaker reconciliation, combining AssemblyAI's audio transcription with the original meeting captions."]}),"\n",(0,r.jsx)(n.li,{children:"Stores the processed data in a PostgreSQL database."}),"\n",(0,r.jsx)(n.li,{children:"Exposes a gRPC interface for communication with the Control Backend."}),"\n",(0,r.jsx)(n.li,{children:"Provides a Celery task to retry failed transcriptions."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Post-Processing (Speaker Reconciliation):"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.a,{href:"https://www.assemblyai.com/",children:"AssemblyAI"})," for accurate audio transcription."]}),"\n",(0,r.jsxs)(n.li,{children:["Aligns speaker names from the original meeting captions with the ",(0,r.jsx)(n.a,{href:"https://www.assemblyai.com/",children:"AssemblyAI"})," transcript."]}),"\n",(0,r.jsxs)(n.li,{children:["Employs ",(0,r.jsx)(n.a,{href:"https://www.nltk.org/",children:"NLTK"})," for sentence tokenization and ",(0,r.jsx)(n.a,{href:"https://github.com/rapidfuzz/RapidFuzz",children:"rapidfuzz"})," for fuzzy string matching to reconcile speakers."]}),"\n",(0,r.jsx)(n.li,{children:"Handles timestamp alignment and text similarity comparisons."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Django Celery Tasks:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_transcript_generator_worker"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Downloads the ",(0,r.jsx)(n.code,{children:".tar"})," file from S3."]}),"\n",(0,r.jsx)(n.li,{children:"Extracts audio and transcript files."}),"\n",(0,r.jsxs)(n.li,{children:["Transcribes the audio using ",(0,r.jsx)(n.a,{href:"https://www.assemblyai.com/",children:"AssemblyAI"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Reconciles speaker labels using the meeting metadata and NLTK/rapidfuzz."}),"\n",(0,r.jsx)(n.li,{children:"Stores the transcription data in the PostgreSQL database."}),"\n",(0,r.jsx)(n.li,{children:"Handles error logging and retries."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_transcript_retry_cronjob"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Periodically checks for failed transcription tasks."}),"\n",(0,r.jsx)(n.li,{children:"Retries failed tasks, up to a maximum number of retries."}),"\n",(0,r.jsx)(n.li,{children:"Sends failure notifications if retries are exhausted."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PostgreSQL Database:"})," Stores processed meeting data, including transcripts and metadata."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Redis Integration:"})," Celery uses Redis as a message broker and result backend."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"gRPC Interface:"})," Enables communication between the Worker Backend and the Control Backend."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SNS/SQS Integration:"})," S3 triggers SNS notifications upon file upload, which are then queued in SQS for processing by the Worker Backend. This system includes a Dead Letter Queue (DLQ) for handling failed messages."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"6. Error Monitoring and Observability:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.a,{href:"https://www.highlight.io/",children:"highlight.io"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Monitors the system for errors and exceptions for both meeting bots and each of the control panel services."}),"\n",(0,r.jsx)(n.li,{children:"Provides real-time alerts via Slack."}),"\n",(0,r.jsx)(n.li,{children:"Captures detailed logs and error reports."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CloudWatch:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Monitors ECS logs and application-level metrics."}),"\n",(0,r.jsx)(n.li,{children:"Aids in debugging and performance optimization."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"workflow-summary",children:(0,r.jsx)(n.strong,{children:"Workflow Summary:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"A meeting bot task is scheduled or triggered via the Control Backend API."}),"\n",(0,r.jsx)(n.li,{children:"The Control Backend uses the ECS Client Service to launch an ECS task in Fargate."}),"\n",(0,r.jsx)(n.li,{children:"The MeetingBot joins the meeting, records audio, and extracts captions."}),"\n",(0,r.jsx)(n.li,{children:"The MeetingBot uploads the data to S3."}),"\n",(0,r.jsx)(n.li,{children:"S3 triggers an SNS notification."}),"\n",(0,r.jsxs)(n.li,{children:["The Worker Backend, via Celery, processes the uploaded data, transcribes it using ",(0,r.jsx)(n.a,{href:"https://www.assemblyai.com/",children:"AssemblyAI"}),", and reconciles speakers using ",(0,r.jsx)(n.a,{href:"https://www.nltk.org/",children:"NLTK"})," and ",(0,r.jsx)(n.a,{href:"https://github.com/rapidfuzz/RapidFuzz",children:"rapidfuzz"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"The processed data is stored in the PostgreSQL database."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.highlight.io/",children:"highlight.io"})," and CloudWatch monitor the system for errors and performance issues."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"key-technologies",children:(0,r.jsx)(n.strong,{children:"Key Technologies"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Containerization:"})," Docker, AWS Fargate, Amazon ECR"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Orchestration:"})," NestJS, BullMQ, AWS SDK"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automation:"})," Python, ",(0,r.jsx)(n.a,{href:"https://selenium-python.readthedocs.io/",children:"Selenium"}),", ",(0,r.jsx)(n.a,{href:"https://www.ffmpeg.org/",children:"FFmpeg"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Processing:"})," Django, Celery, ",(0,r.jsx)(n.a,{href:"https://www.assemblyai.com/",children:"AssemblyAI"}),", ",(0,r.jsx)(n.a,{href:"https://www.nltk.org/",children:"NLTK"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Storage:"})," Amazon S3, PostgreSQL, Redis"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Messaging:"})," Amazon SNS, Amazon SQS"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitoring:"})," ",(0,r.jsx)(n.a,{href:"https://www.highlight.io/",children:"highlight.io"}),", AWS CloudWatch"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(96540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);